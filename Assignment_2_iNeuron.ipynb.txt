{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "##### Q1. What are the two values of the Boolean data type? How do you write them?"
      ],
      "metadata": {
        "id": "3esc9Wo-ULp5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        " - Ans\n",
        "- True and False, using capital T and F, with the rest of the word in lowercase"
      ],
      "metadata": {
        "id": "z5cUNlmGU_cj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#####Q2. What are the three different types of Boolean operators?"
      ],
      "metadata": {
        "id": "Nedg9dUDVRa0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        " -  Ans\n",
        "- The three different types of Boolean operator are\n",
        "- \"AND, OR and NOT\"."
      ],
      "metadata": {
        "id": "fVVxssMmV1mH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#####Q3. Make a list of each Boolean operator's truth tables (i.e. every possible combination of Boolean values for the operator and what it evaluate)."
      ],
      "metadata": {
        "id": "Ue5x9p9NWfgH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "- Ans\n",
        "\n",
        " - True and True is True.\n",
        " - False and False is False.\n",
        " - True and False is False.\n",
        " - False and True is False.\n",
        " - True or True is True.\n",
        " - False or False is False.\n",
        " - True or False is True.\n",
        " - False or True is True.\n",
        " - not True is False.\n",
        " - not False is True."
      ],
      "metadata": {
        "id": "fqf_O2pvYniF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#####Q4. What are the values of the following expressions?\n",
        "- (5 > 4) and (3 == 5)\n",
        "- not (5 > 4)\n",
        "- (5 > 4) or (3 == 5)\n",
        "- not ((5 > 4) or (3 == 5))\n",
        "- (True and True) and (True == False)\n",
        "-(not False) or (not True)"
      ],
      "metadata": {
        "id": "_bHuy8xDZkTg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "- Ans\n",
        " - False\n",
        " - False\n",
        " - True\n",
        " - False\n",
        " - False\n",
        " - True"
      ],
      "metadata": {
        "id": "67IbMLc2aUUf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#####Q5. What are the six comparison operators?"
      ],
      "metadata": {
        "id": "wko1LCrha5ad"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " - Ans\n",
        "- ==, !=, <, >, <=, and >=."
      ],
      "metadata": {
        "id": "8_7kBUvTbFom"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#####Q6. How do you tell the difference between the equal to and assignment operators?Describe a condition and when you would use one."
      ],
      "metadata": {
        "id": "NgLdKFdube46"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " - Ans\n",
        "- == is the operator that compares between two values and it will evaluates to a Boolean.\n",
        "- = is the assignment operator that stores a value in a variable.\n",
        "- A condition is an expression used in a flow control statement that evaluates to a Boolean value."
      ],
      "metadata": {
        "id": "DjfM2zmycDDC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#####Q7 Identify the three blocks in this code:"
      ],
      "metadata": {
        "id": "8YgN2s2YdZZa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "spam = 0\n",
        "if spam == 10:\n",
        "    print('eggs')\n",
        "    if spam > 5:\n",
        "        print('bacon')\n",
        "    else:\n",
        "        print('ham')\n",
        "    print('spam')\n",
        "print('spam')"
      ],
      "metadata": {
        "id": "pfkjCKq7EmUH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "- Ans\n",
        "- The three blocks are everything inside the if statement and the lines.\n",
        " - print('bacon') and print('ham')."
      ],
      "metadata": {
        "id": "RKlcE-IueG0J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('eggs')\n",
        "if spam > 5:\n",
        "    print('bacon')\n",
        "else:\n",
        "    print('ham')\n",
        "print('spam')"
      ],
      "metadata": {
        "id": "DTj421jBDZOA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#####Q8. Write code that prints Hello if 1 is stored in spam, prints Howdy if 2 is stored in spam, and prints Greetings! if anything else is stored in spam."
      ],
      "metadata": {
        "id": "WURWUtUseUkn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "spam = int(input())\n",
        "\n",
        "if spam == 1:\n",
        " print('Hello')\n",
        "elif spam == 2:\n",
        "  print('Howdy')\n",
        "else:\n",
        "  print('Greetings!')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GrhhFKGFekXZ",
        "outputId": "4312e9a6-68e5-42ff-f532-ea003c932dc1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n",
            "Greetings!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#####Q9.If your programme is stuck in an endless loop, what keys youâ€™ll press?"
      ],
      "metadata": {
        "id": "uKpkxW4ffD6z"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " - Ans\n",
        "- Press CTRL-C to stop a program stuck in an infinite loop."
      ],
      "metadata": {
        "id": "HoxkaLM8fKh9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#####Q10. How can you tell the difference between break and continue?"
      ],
      "metadata": {
        "id": "1W-lwlODfVql"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " -Ans\n",
        " \n",
        "- In the \"Break\" statement\n",
        " - Break is use to stop the execution of the loop at a specific condition.\n",
        "- In \"Continue\" statement\n",
        " - Continue is used to skip a particular iteration of the loop"
      ],
      "metadata": {
        "id": "8J-IzN0OgBL0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#####Q11. In a for loop, what is the difference between range(10), range(0, 10), and range(0, 10, 1)?"
      ],
      "metadata": {
        "id": "KDaInAqxhxgi"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " - Ans 1. range (10)\n",
        "- In this case, range() returns a sequence of numbers starting from 0 up to the number"
      ],
      "metadata": {
        "id": "pdi7gnkpkCw-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "- Ans 2. range(0,10)\n",
        " - In this case, range() returns a sequence of numbers starting from start up to stop."
      ],
      "metadata": {
        "id": "asDVnsyEoDl_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "- Ans 3. range(0,10,1)\n",
        " - In for loop this will indicate \n",
        " - range([start],stop,[step])\n",
        "-If we pass all three arguments,\n",
        "\n",
        " - the first argument is start\n",
        " -the second argument is stop\n",
        " -the third argument is step\n",
        "-The step argument specifies the incrementation between two numbers in the sequence."
      ],
      "metadata": {
        "id": "6ABnqWn8lkut"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#####Q12. Write a short program that prints the numbers 1 to 10 using a for loop. Then write an equivalent program that prints the numbers 1 to 10 using a while loop."
      ],
      "metadata": {
        "id": "3uVms7Mhqs1M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# first using \"for loop\"\n",
        "for i in range(1,11):\n",
        " print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lmT3DZtWq09c",
        "outputId": "20ef0430-be69-4106-c294-23089b858456"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n",
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Sesond using \"while loop\"\n",
        "no = 10\n",
        "i = 1\n",
        "while i <= 10:\n",
        "  print(i)\n",
        "  i = i + 1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1oIJMmE1DvhO",
        "outputId": "ecc830c3-5285-4643-988a-08c663545360"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n",
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#####Q13. If you had a function named bacon() inside a module named spam, how would you call it after importing spam?"
      ],
      "metadata": {
        "id": "lljOWdTDrwSH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "- Ans\n",
        " - This function can be called with \n",
        " - spam.bacon()"
      ],
      "metadata": {
        "id": "1jXx_P5ZsM2_"
      }
    }
  ]
}